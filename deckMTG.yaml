openapi: 3.0.3
info:
  title: MTG Deck Manager API
  description: API RESTful para criar, gerenciar e explorar decks e torneios de Magic: The Gathering.
  version: 1.0.0

servers:
  - url: https://api.mtgdeckmanager.com/v1

paths:
  /cards:
    get:
      summary: Listar todas as cartas disponíveis
      responses:
        '200':
          description: Lista de cartas retornada com sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CardDTO'
        '400':
          description: Requisição inválida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'

  /cards/{id}:
    get:
      summary: Obter detalhes de uma carta específica
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Carta encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDTO'
        '404':
          description: Carta não encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'

  /cards/search:
    get:
      summary: Buscar cartas por nome, tipo, cor, etc.
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: type
          in: query
          schema:
            type: string
        - name: color
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Resultados da busca
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CardDTO'
        '400':
          description: Parâmetros de busca inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'

  /sets:
    get:
      summary: Listar todas as coleções de MTG
      responses:
        '200':
          description: Lista de coleções
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SetDTO'
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'

  /sets/{code}:
    get:
      summary: Ver detalhes de uma coleção específica
      parameters:
        - name: code
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Coleção encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetDTO'
        '404':
          description: Coleção não encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'

  /decks:
    get:
      summary: Listar decks públicos
      responses:
        '200':
          description: Lista de decks públicos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeckDTO'
        '400':
          description: Requisição inválida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'

    post:
      summary: Criar um novo deck
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeckCreateDTO'
      responses:
        '201':
          description: Deck criado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeckDTO'
        '400':
          description: Dados do deck inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
        '401':
          description: Não autorizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'

  /decks/{id}:
    get:
      summary: Ver informações de um deck específico
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Deck encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeckDTO'
        '404':
          description: Deck não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'

    put:
      summary: Atualizar informações de um deck
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeckCreateDTO'
      responses:
        '200':
          description: Deck atualizado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeckDTO'
        '400':
          description: Dados do deck inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
        '401':
          description: Não autorizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
        '404':
          description: Deck não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'

    delete:
      summary: Excluir um deck
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Deck excluído com sucesso
        '401':
          description: Não autorizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
        '404':
          description: Deck não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'

  /decks/{id}/favorite:
    post:
      summary: Marcar um deck como favorito
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Deck marcado como favorito com sucesso
        '401':
          description: Não autorizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
        '404':
          description: Deck não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'

  /users/{id}/favorites:
    get:
      summary: Listar decks favoritos de um usuário
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Lista de decks favoritos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeckDTO'
        '401':
          description: Não autorizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
        '404':
          description: Usuário não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'

  /users/{id}/friends:
    get:
      summary: Listar amigos de um usuário
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Lista de amigos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDTO'
        '401':
          description: Não autorizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
        '404':
          description: Usuário não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'

    post:
      summary: Enviar pedido de amizade
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                friendId:
                  type: integer
      responses:
        '201':
          description: Pedido de amizade enviado
        '400':
          description: Dados inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
        '401':
          description: Não autorizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'

  /tournaments:
    get:
      summary: Listar torneios disponíveis
      responses:
        '200':
          description: Lista de torneios
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TournamentDTO'
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'

    post:
      summary: Criar um novo torneio
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TournamentDTO'
      responses:
        '201':
          description: Torneio criado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TournamentDTO'
        '400':
          description: Dados do torneio inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
        '401':
          description: Não autorizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'

  /tournaments/{id}:
    get:
      summary: Ver detalhes de um torneio específico
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Torneio encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TournamentDTO'
        '404':
          description: Torneio não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'

  /tournaments/{id}/join:
    post:
      summary: Participar de um torneio
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Participação registrada com sucesso
        '401':
          description: Não autorizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
        '404':
          description: Torneio não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'

  /auth/register:
    post:
      summary: Registrar novo usuário
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegisterDTO'
      responses:
        '201':
          description: Usuário registrado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '400':
          description: Dados inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
        '409':
          description: Usuário já existe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'

  /auth/login:
    post:
      summary: Autenticar usuário
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequestDTO'
      responses:
        '200':
          description: Login bem-sucedido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponseDTO'
        '400':
          description: Dados inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
        '401':
          description: Credenciais inválidas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    CardDTO:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        manaCost:
          type: string
        type:
          type: string
        rarity:
          type: string
        set:
          type: string
        power:
          type: string
        toughness:
          type: string
        text:
          type: string
        colors:
          type: array
          items:
            type: string
        imageUrl:
          type: string

    SetDTO:
      type: object
      properties:
        code:
          type: string
        name:
          type: string
        releaseDate:
          type: string
        cardCount:
          type: integer
        iconUrl:
          type: string

    DeckDTO:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        format:
          type: string
        visibility:
          type: string
        creator:
          type: object
          properties:
            id:
              type: integer
            username:
              type: string
        cards:
          type: array
          items:
            type: object
            properties:
              cardId:
                type: integer
              quantity:
                type: integer
        createdAt:
          type: string
        likes:
          type: integer
        comments:
          type: integer

    DeckCreateDTO:
      type: object
      required: [name, format, cards]
      properties:
        name:
          type: string
        description:
          type: string
        format:
          type: string
        visibility:
          type: string
        cards:
          type: array
          items:
            type: object
            required: [cardId, quantity]
            properties:
              cardId:
                type: integer
              quantity:
                type: integer

    UserDTO:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        avatarUrl:
          type: string
        bio:
          type: string
        decksCreated:
          type: integer
        friendsCount:
          type: integer

    UserRegisterDTO:
      type: object
      required: [username, email, password, confirmPassword]
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
        confirmPassword:
          type: string

    LoginRequestDTO:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
        password:
          type: string

    LoginResponseDTO:
      type: object
      properties:
        token:
          type: string
        user:
          $ref: '#/components/schemas/UserDTO'
        expiresAt:
          type: string

    TournamentDTO:
      type: object
      required: [name, format, startDate]
      properties:
        id:
          type: integer
        name:
          type: string
        format:
          type: string
        organizer:
          type: string
        startDate:
          type: string
        participants:
          type: integer
        status:
          type: string

    ErrorResponseDTO:
      type: object
      properties:
        status:
          type: integer
        message:
          type: string
        errors:
          type: array
          items:
            type: string
        timestamp:
          type: string
